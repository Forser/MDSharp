// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210525142259_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("API.Entites.AltTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("AltTitle");
                });

            modelBuilder.Entity("API.Entites.Bio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bio");
                });

            modelBuilder.Entity("API.Entites.CoverArt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoverArts");
                });

            modelBuilder.Entity("API.Entites.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("API.Entites.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("API.Entites.Manga", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastChapter")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastVolume")
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicationDemographic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Year")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("createdAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("updatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("API.Entites.ScanlationGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeaderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("ScanlationGroups");
                });

            modelBuilder.Entity("API.Entites.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("API.Entites.TagAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagAttributes");
                });

            modelBuilder.Entity("API.Entites.TagAttributesName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TagAttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagAttributesId");

                    b.ToTable("TagAttributesName");
                });

            modelBuilder.Entity("API.Entites.TagDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TagAttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TagId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TagAttributesId");

                    b.HasIndex("TagId");

                    b.ToTable("TagDescription");
                });

            modelBuilder.Entity("API.Entites.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("API.Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entites.AltTitle", b =>
                {
                    b.HasOne("API.Entites.Manga", null)
                        .WithMany("AltTitles")
                        .HasForeignKey("MangaId");
                });

            modelBuilder.Entity("API.Entites.Bio", b =>
                {
                    b.HasOne("API.Entites.User", null)
                        .WithMany("Bio")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Entites.Description", b =>
                {
                    b.HasOne("API.Entites.Manga", null)
                        .WithMany("Description")
                        .HasForeignKey("MangaId");
                });

            modelBuilder.Entity("API.Entites.Link", b =>
                {
                    b.HasOne("API.Entites.Manga", null)
                        .WithMany("Links")
                        .HasForeignKey("MangaId");
                });

            modelBuilder.Entity("API.Entites.ScanlationGroup", b =>
                {
                    b.HasOne("API.Entites.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("API.Entites.Tag", b =>
                {
                    b.HasOne("API.Entites.Manga", null)
                        .WithMany("Tags")
                        .HasForeignKey("MangaId");
                });

            modelBuilder.Entity("API.Entites.TagAttributes", b =>
                {
                    b.HasOne("API.Entites.Tag", null)
                        .WithMany("Attributes")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("API.Entites.TagAttributesName", b =>
                {
                    b.HasOne("API.Entites.TagAttributes", null)
                        .WithMany("TagAttributeName")
                        .HasForeignKey("TagAttributesId");
                });

            modelBuilder.Entity("API.Entites.TagDescription", b =>
                {
                    b.HasOne("API.Entites.TagAttributes", null)
                        .WithMany("TagDescription")
                        .HasForeignKey("TagAttributesId");

                    b.HasOne("API.Entites.Tag", null)
                        .WithMany("Description")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("API.Entites.Title", b =>
                {
                    b.HasOne("API.Entites.Manga", null)
                        .WithMany("Title")
                        .HasForeignKey("MangaId");
                });

            modelBuilder.Entity("API.Entites.Manga", b =>
                {
                    b.Navigation("AltTitles");

                    b.Navigation("Description");

                    b.Navigation("Links");

                    b.Navigation("Tags");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("API.Entites.Tag", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Description");
                });

            modelBuilder.Entity("API.Entites.TagAttributes", b =>
                {
                    b.Navigation("TagAttributeName");

                    b.Navigation("TagDescription");
                });

            modelBuilder.Entity("API.Entites.User", b =>
                {
                    b.Navigation("Bio");
                });
#pragma warning restore 612, 618
        }
    }
}

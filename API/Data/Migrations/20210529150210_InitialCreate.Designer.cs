// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210529150210_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("API.Entites.AltTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaAttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaAttributesId");

                    b.ToTable("AltTitle");
                });

            modelBuilder.Entity("API.Entites.Bio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Bio");
                });

            modelBuilder.Entity("API.Entites.ChapterAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Chapter")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Hash")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PublishAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TranslatedLanguage")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChapterAttributes");
                });

            modelBuilder.Entity("API.Entites.ChapterData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChapterId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("ChapterRead")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.ToTable("ChapterData");
                });

            modelBuilder.Entity("API.Entites.ChapterId", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChaptersReadId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ReadId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChaptersReadId");

                    b.ToTable("ChapterId");
                });

            modelBuilder.Entity("API.Entites.ChapterRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaChapterId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationshipId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaChapterId");

                    b.ToTable("ChapterRelationship");
                });

            modelBuilder.Entity("API.Entites.ChaptersRead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ChaptersReads");
                });

            modelBuilder.Entity("API.Entites.CoverArt", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Volume")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("CoverArts");
                });

            modelBuilder.Entity("API.Entites.Description", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Description");
                });

            modelBuilder.Entity("API.Entites.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Amazon")
                        .HasColumnType("TEXT");

                    b.Property<string>("AniList")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnimePlanet")
                        .HasColumnType("TEXT");

                    b.Property<string>("BookWalker")
                        .HasColumnType("TEXT");

                    b.Property<string>("EBookJP")
                        .HasColumnType("TEXT");

                    b.Property<string>("EngTL")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kitsu")
                        .HasColumnType("TEXT");

                    b.Property<string>("MAL")
                        .HasColumnType("TEXT");

                    b.Property<string>("MangaUpdates")
                        .HasColumnType("TEXT");

                    b.Property<string>("NovelUpdates")
                        .HasColumnType("TEXT");

                    b.Property<string>("Raw")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("API.Entites.Manga", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaCollectionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("MangaCollectionId");

                    b.ToTable("Mangas");
                });

            modelBuilder.Entity("API.Entites.MangaAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContentRating")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int?>("DescriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastChapter")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastVolume")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LinksId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OriginalLanguage")
                        .HasColumnType("TEXT");

                    b.Property<string>("PublicationDemographic")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<int?>("TitleId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId");

                    b.HasIndex("LinksId");

                    b.HasIndex("TitleId");

                    b.ToTable("MangaAttributes");
                });

            modelBuilder.Entity("API.Entites.MangaChapter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaChaptersId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.HasIndex("MangaChaptersId");

                    b.ToTable("MangaChapter");
                });

            modelBuilder.Entity("API.Entites.MangaChapters", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MangaChapters");
                });

            modelBuilder.Entity("API.Entites.MangaCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("MangaCollection");
                });

            modelBuilder.Entity("API.Entites.MangaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaAttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaAttributesId");

                    b.ToTable("MangaData");
                });

            modelBuilder.Entity("API.Entites.MangaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Result")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataId");

                    b.ToTable("MangaUsers");
                });

            modelBuilder.Entity("API.Entites.Relationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RelationshipId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationshipType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MangaId");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("API.Entites.ScanlationGroup", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("LeaderId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("ScanlationGroups");
                });

            modelBuilder.Entity("API.Entites.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("MangaAttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TagId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.HasIndex("MangaAttributesId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("API.Entites.TagAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Group")
                        .HasColumnType("TEXT");

                    b.Property<int?>("NameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NameId");

                    b.ToTable("TagAttributes");
                });

            modelBuilder.Entity("API.Entites.TagName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TagName");
                });

            modelBuilder.Entity("API.Entites.Title", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("API.Entites.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("API.Entites.UserAttributes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Version")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UserAttributes");
                });

            modelBuilder.Entity("API.Entites.UserData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AttributesId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AttributesId");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("API.Entites.UserRelationship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MangaId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserDataId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserDataId");

                    b.ToTable("UserRelationship");
                });

            modelBuilder.Entity("API.Entites.AltTitle", b =>
                {
                    b.HasOne("API.Entites.MangaAttributes", null)
                        .WithMany("AltTitles")
                        .HasForeignKey("MangaAttributesId");
                });

            modelBuilder.Entity("API.Entites.Bio", b =>
                {
                    b.HasOne("API.Entites.User", null)
                        .WithMany("Bio")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("API.Entites.ChapterData", b =>
                {
                    b.HasOne("API.Entites.ChapterAttributes", "Attributes")
                        .WithMany()
                        .HasForeignKey("AttributesId");

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("API.Entites.ChapterId", b =>
                {
                    b.HasOne("API.Entites.ChaptersRead", null)
                        .WithMany("Data")
                        .HasForeignKey("ChaptersReadId");
                });

            modelBuilder.Entity("API.Entites.ChapterRelationship", b =>
                {
                    b.HasOne("API.Entites.MangaChapter", null)
                        .WithMany("Relationships")
                        .HasForeignKey("MangaChapterId");
                });

            modelBuilder.Entity("API.Entites.Manga", b =>
                {
                    b.HasOne("API.Entites.MangaData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("API.Entites.MangaCollection", null)
                        .WithMany("Mangas")
                        .HasForeignKey("MangaCollectionId");

                    b.Navigation("Data");
                });

            modelBuilder.Entity("API.Entites.MangaAttributes", b =>
                {
                    b.HasOne("API.Entites.Description", "Description")
                        .WithMany()
                        .HasForeignKey("DescriptionId");

                    b.HasOne("API.Entites.Link", "Links")
                        .WithMany()
                        .HasForeignKey("LinksId");

                    b.HasOne("API.Entites.Title", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.Navigation("Description");

                    b.Navigation("Links");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("API.Entites.MangaChapter", b =>
                {
                    b.HasOne("API.Entites.ChapterData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.HasOne("API.Entites.MangaChapters", null)
                        .WithMany("results")
                        .HasForeignKey("MangaChaptersId");

                    b.Navigation("Data");
                });

            modelBuilder.Entity("API.Entites.MangaData", b =>
                {
                    b.HasOne("API.Entites.MangaAttributes", "MangaAttributes")
                        .WithMany()
                        .HasForeignKey("MangaAttributesId");

                    b.Navigation("MangaAttributes");
                });

            modelBuilder.Entity("API.Entites.MangaUser", b =>
                {
                    b.HasOne("API.Entites.UserData", "Data")
                        .WithMany()
                        .HasForeignKey("DataId");

                    b.Navigation("Data");
                });

            modelBuilder.Entity("API.Entites.Relationship", b =>
                {
                    b.HasOne("API.Entites.Manga", null)
                        .WithMany("Relationships")
                        .HasForeignKey("MangaId");
                });

            modelBuilder.Entity("API.Entites.ScanlationGroup", b =>
                {
                    b.HasOne("API.Entites.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId");

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("API.Entites.Tag", b =>
                {
                    b.HasOne("API.Entites.TagAttributes", "Attributes")
                        .WithMany()
                        .HasForeignKey("AttributesId");

                    b.HasOne("API.Entites.MangaAttributes", null)
                        .WithMany("Tags")
                        .HasForeignKey("MangaAttributesId");

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("API.Entites.TagAttributes", b =>
                {
                    b.HasOne("API.Entites.TagName", "Name")
                        .WithMany()
                        .HasForeignKey("NameId");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("API.Entites.UserData", b =>
                {
                    b.HasOne("API.Entites.UserAttributes", "Attributes")
                        .WithMany()
                        .HasForeignKey("AttributesId");

                    b.Navigation("Attributes");
                });

            modelBuilder.Entity("API.Entites.UserRelationship", b =>
                {
                    b.HasOne("API.Entites.UserData", null)
                        .WithMany("Relationships")
                        .HasForeignKey("UserDataId");
                });

            modelBuilder.Entity("API.Entites.ChaptersRead", b =>
                {
                    b.Navigation("Data");
                });

            modelBuilder.Entity("API.Entites.Manga", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("API.Entites.MangaAttributes", b =>
                {
                    b.Navigation("AltTitles");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("API.Entites.MangaChapter", b =>
                {
                    b.Navigation("Relationships");
                });

            modelBuilder.Entity("API.Entites.MangaChapters", b =>
                {
                    b.Navigation("results");
                });

            modelBuilder.Entity("API.Entites.MangaCollection", b =>
                {
                    b.Navigation("Mangas");
                });

            modelBuilder.Entity("API.Entites.User", b =>
                {
                    b.Navigation("Bio");
                });

            modelBuilder.Entity("API.Entites.UserData", b =>
                {
                    b.Navigation("Relationships");
                });
#pragma warning restore 612, 618
        }
    }
}
